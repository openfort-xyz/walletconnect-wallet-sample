/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BLSSignatureAggregator,
  BLSSignatureAggregatorInterface,
} from "../../../contracts/bls/BLSSignatureAggregator";

const _abi = [
  {
    inputs: [],
    name: "BLS_DOMAIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "N",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "sigsForAggregation",
        type: "bytes[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatesSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "userOpToMessage",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "",
        type: "uint256[2]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "offChainSigCheck",
        type: "bool",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "sigForUserOp",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sigForAggregation",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "offChainSigInfo",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611be0806100206000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80636076d43a1161005b5780636076d43a146100ee578063a8309b9e14610110578063c9e525df14610130578063e3563a4f1461015757600080fd5b80629d92501461008157806314e72634146100bb57806340864431146100ce575b600080fd5b6100a87fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b81565b6040519081526020015b60405180910390f35b6100a86100c93660046113df565b61016c565b6100e16100dc3660046113df565b61018b565b6040516100b2919061143d565b6101016100fc36600461145c565b6101aa565b6040516100b29392919061151f565b61012361011e366004611562565b6103f0565b6040516100b29190611625565b6100a87f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781565b61016a610165366004611638565b610545565b005b600080610178836108c4565b9050610184838261098d565b9392505050565b610193611118565b600061019e836108c4565b905061018483826109d7565b6060808060006101be6101408701876116fd565b8101906101cb9190611769565b90506000863573ffffffffffffffffffffffffffffffffffffffff1663e02afbae6040518163ffffffff1660e01b8152600401608060405180830381865afa15801561021b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023f91906117c9565b9050600061024f6100dc8961183c565b9050861561028d5782826102656100c98b61183c565b6040516020016102779392919061186b565b604051602081830303815290604052935061038d565b6040517febbdac9100000000000000000000000000000000000000000000000000000000815273__$ef9c3d7698af39cc39524484516bc81727$__9063ebbdac91906102e190869086908690600401611894565b602060405180830381865af41580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032291906118bd565b61038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f424c533a2077726f6e672073696700000000000000000000000000000000000060448201526064015b60405180910390fd5b60408051602081019091526000815295506103ac6101408901896116fd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250989b929a50959850909650505050505050565b60606000825167ffffffffffffffff81111561040e5761040e611154565b60405190808252806020026020018201604052801561045357816020015b604080518082019091526000808252602082015281526020019060019003908161042c5790505b50905060005b81518110156104dd57600080858381518110610477576104776118da565b60200260200101518060200190518101906104929190611909565b915091506040518060400160405280838152602001828152508484815181106104bd576104bd6118da565b6020026020010181905250505080806104d59061195c565b915050610459565b50600061050a827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610aaf565b805160208083015160405193945061052d93909101918252602082015260400190565b60405160208183030381529060405292505050919050565b604081146105af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f424c533a20696e76616c6964207369676e6174757265000000000000000000006044820152606401610384565b60006105bd82840184611769565b90508360008167ffffffffffffffff8111156105db576105db611154565b60405190808252806020026020018201604052801561061457816020015b610601611136565b8152602001906001900390816105f95790505b50905060008267ffffffffffffffff81111561063257610632611154565b60405190808252806020026020018201604052801561066b57816020015b610658611118565b8152602001906001900390816106505790505b50905060005b838110156107be57600089898381811061068d5761068d6118da565b905060200281019061069f9190611994565b6106a89061183c565b90506000816000015190508073ffffffffffffffffffffffffffffffffffffffff1663e02afbae6175306040518263ffffffff1660e01b81526004016080604051808303818786fa158015610701573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061072691906117c9565b858481518110610738576107386118da565b602002602001018190525061078c82868581518110610759576107596118da565b602002602001015160405160200161077191906119d2565b604051602081830303815290604052805190602001206109d7565b84848151811061079e5761079e6118da565b6020026020010181905250505080806107b69061195c565b915050610671565b506040517f9141376300000000000000000000000000000000000000000000000000000000815273__$ef9c3d7698af39cc39524484516bc81727$__90639141376390610813908790869086906004016119e0565b602060405180830381865af4158015610830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085491906118bd565b6108ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f424c533a2076616c69646174655369676e617475726573206661696c656400006044820152606401610384565b5050505050505050565b6000816040015151600003610979576000826000015173ffffffffffffffffffffffffffffffffffffffff1663e02afbae6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906117c9565b90508060405160200161095b91906119d2565b60405160208183030381529060405280519060200120915050919050565b81604001518051906020012090505b919050565b600061099883610b9a565b604080516020810192909252810183905230606082015246608082015260a0016040516020818303038152906040528051906020012090505b92915050565b6109df611118565b60006109eb848461098d565b905073__$ef9c3d7698af39cc39524484516bc81727$__63a850a9097fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b83604051602001610a3b91815260200190565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610a67929190611a7e565b6040805180830381865af4158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190611a97565b949350505050565b6040805180820190915260008082526020820152600083600081518110610ad857610ad86118da565b6020026020010151600001519050600084600081518110610afb57610afb6118da565b602090810291909101810151015190506001805b8651811015610b7b57610b628484848a8581518110610b3057610b306118da565b6020026020010151600001518b8681518110610b4e57610b4e6118da565b60200260200101516020015160018c610c67565b9195509350915080610b738161195c565b915050610b0f565b50610b8883838388610fb4565b90855260208501525091949350505050565b80516020808301516040808501518051908401206060860151805190850120608087015160a088015160c089015160e08a01516101008b01516101208c01518051908b0120975160009b610c4a9b909a99910173ffffffffffffffffffffffffffffffffffffffff9a909a168a5260208a019890985260408901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b6000808089158015610c77575088155b15610c89575085915084905083610fa7565b86158015610c95575085155b15610ca7575088915087905086610fa7565b610caf611136565b8480610cbd57610cbd611aec565b898a0981528480610cd057610cd0611aec565b81518a0960208201528480610ce757610ce7611aec565b86870960408201528480610cfd57610cfd611aec565b6040820151870960608201526040805160808101909152808680610d2357610d23611aec565b60408401518e0981526020018680610d3d57610d3d611aec565b60608401518d0981526020018680610d5757610d57611aec565b83518b0981526020018680610d6e57610d6e611aec565b60208401518a09905260408101518151919250141580610d9657506060810151602082015114155b610dfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610384565b610e04611136565b8580610e1257610e12611aec565b8251610e1e9088611b1b565b60408401510881528580610e3457610e34611aec565b6020830151610e439088611b1b565b60608401510860208201528580610e5c57610e5c611aec565b8151800960408201528580610e7357610e73611aec565b8151604083015109606082015260008680610e9057610e90611aec565b6060830151610e9f9089611b1b565b8880610ead57610ead611aec565b602085015180090890508680610ec557610ec5611aec565b8780610ed357610ed3611aec565b8880610ee157610ee1611aec565b6040850151865109600209610ef69089611b1b565b8208905060008780610f0a57610f0a611aec565b8880610f1857610f18611aec565b610f22848b611b1b565b8a80610f3057610f30611aec565b60408701518851090860208501510990508780610f4f57610f4f611aec565b8880610f5d57610f5d611aec565b6060850151602087015109610f72908a611b1b565b8208905060008880610f8657610f86611aec565b8980610f9457610f94611aec565b8b8f098551099297509095509093505050505b9750975097945050505050565b6000806000610fc38585611023565b905060008480610fd557610fd5611aec565b828309905060008580610fea57610fea611aec565b828a09905060008680610fff57610fff611aec565b878061100d5761100d611aec565b8486098a09919a91995090975050505050505050565b600082158015906110345750818314155b801561103f57508115155b6110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206e756d6265720000000000000000000000000000000000006044820152606401610384565b6000600183825b861561110d576110bc8783611b32565b90508286806110cd576110cd611aec565b87806110db576110db611aec565b8584096110e89089611b1b565b86089094509250866110fa8183611b6d565b6111049084611b1b565b975091506110ac565b509195945050505050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156111a7576111a7611154565b60405290565b6040805190810167ffffffffffffffff811182821017156111a7576111a7611154565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561121757611217611154565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461098857600080fd5b600082601f83011261125457600080fd5b813567ffffffffffffffff81111561126e5761126e611154565b61129f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016111d0565b8181528460208386010111156112b457600080fd5b816020850160208301376000918101602001919091529392505050565b600061016082840312156112e457600080fd5b6112ec611183565b90506112f78261121f565b815260208201356020820152604082013567ffffffffffffffff8082111561131e57600080fd5b61132a85838601611243565b6040840152606084013591508082111561134357600080fd5b61134f85838601611243565b60608401526080840135608084015260a084013560a084015260c084013560c084015260e084013560e0840152610100915081840135828401526101209150818401358181111561139f57600080fd5b6113ab86828701611243565b8385015250610140915081840135818111156113c657600080fd5b6113d286828701611243565b8385015250505092915050565b6000602082840312156113f157600080fd5b813567ffffffffffffffff81111561140857600080fd5b610aa7848285016112d1565b8060005b6002811015611437578151845260209384019390910190600101611418565b50505050565b604081016109d18284611414565b801515811461145957600080fd5b50565b6000806040838503121561146f57600080fd5b823567ffffffffffffffff81111561148657600080fd5b8301610160818603121561149957600080fd5b915060208301356114a98161144b565b809150509250929050565b6000815180845260005b818110156114da576020818501810151868301820152016114be565b818111156114ec576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061153260608301866114b4565b828103602084015261154481866114b4565b9050828103604084015261155881856114b4565b9695505050505050565b6000602080838503121561157557600080fd5b823567ffffffffffffffff8082111561158d57600080fd5b818501915085601f8301126115a157600080fd5b8135818111156115b3576115b3611154565b8060051b6115c28582016111d0565b91825283810185019185810190898411156115dc57600080fd5b86860192505b83831015611618578235858111156115fa5760008081fd5b6116088b89838a0101611243565b83525091860191908601906115e2565b9998505050505050505050565b60208152600061018460208301846114b4565b6000806000806040858703121561164e57600080fd5b843567ffffffffffffffff8082111561166657600080fd5b818701915087601f83011261167a57600080fd5b81358181111561168957600080fd5b8860208260051b850101111561169e57600080fd5b6020928301965094509086013590808211156116b957600080fd5b818701915087601f8301126116cd57600080fd5b8135818111156116dc57600080fd5b8860208285010111156116ee57600080fd5b95989497505060200194505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261173257600080fd5b83018035915067ffffffffffffffff82111561174d57600080fd5b60200191503681900382131561176257600080fd5b9250929050565b60006040828403121561177b57600080fd5b82601f83011261178a57600080fd5b6117926111ad565b8060408401858111156117a457600080fd5b845b818110156117be5780358452602093840193016117a6565b509095945050505050565b6000608082840312156117db57600080fd5b82601f8301126117ea57600080fd5b6040516080810181811067ffffffffffffffff8211171561180d5761180d611154565b60405280608084018581111561182257600080fd5b845b8181101561110d578051835260209283019201611824565b60006109d136836112d1565b8060005b600481101561143757815184526020938401939091019060010161184c565b60e081016118798286611414565b6118866040830185611848565b8260c0830152949350505050565b61010081016118a38286611414565b6118b06040830185611848565b610aa760c0830184611414565b6000602082840312156118cf57600080fd5b81516101848161144b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000806040838503121561191c57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361198d5761198d61192d565b5060010190565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea18336030181126119c857600080fd5b9190910192915050565b608081016109d18284611848565b600060808083016119f18488611414565b604084810183905286519182905260209160a086019083890160005b82811015611a3057611a20848351611848565b9286019290850190600101611a0d565b5050508581036060870152865180825290830193508287019060005b81811015611a6f57611a5f868451611414565b9483019491840191600101611a4c565b50939998505050505050505050565b828152604060208201526000610aa760408301846114b4565b600060408284031215611aa957600080fd5b82601f830112611ab857600080fd5b611ac06111ad565b806040840185811115611ad257600080fd5b845b818110156117be578051845260209384019301611ad4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082821015611b2d57611b2d61192d565b500390565b600082611b68577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ba557611ba561192d565b50029056fea2646970667358221220588b793276426686c470f6caff72d2835fc527cbb5058d152999ede86a1ddadd64736f6c634300080f0033";

type BLSSignatureAggregatorConstructorParams =
  | [
      linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BLSSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class BLSSignatureAggregator__factory extends ContractFactory {
  constructor(...args: BLSSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BLSSignatureAggregator__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ef9c3d7698af39cc39524484516bc81727\\$__", "g"),
      linkLibraryAddresses["contracts/bls/lib/BLSOpen.sol:BLSOpen"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BLSSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<BLSSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BLSSignatureAggregator {
    return super.attach(address) as BLSSignatureAggregator;
  }
  override connect(signer: Signer): BLSSignatureAggregator__factory {
    return super.connect(signer) as BLSSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BLSSignatureAggregatorInterface {
    return new utils.Interface(_abi) as BLSSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BLSSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BLSSignatureAggregator;
  }
}

export interface BLSSignatureAggregatorLibraryAddresses {
  ["contracts/bls/lib/BLSOpen.sol:BLSOpen"]: string;
}
