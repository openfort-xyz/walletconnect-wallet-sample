/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestAggregatedWallet,
  TestAggregatedWalletInterface,
} from "../../../contracts/samples/TestAggregatedWallet";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "anEntryPoint",
        type: "address",
      },
      {
        internalType: "address",
        name: "anAggregator",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldEntryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newEntryPoint",
        type: "address",
      },
    ],
    name: "EntryPointChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "addDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "aggregator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "exec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "dest",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "func",
        type: "bytes[]",
      },
    ],
    name: "execBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "execFromEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAggregator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newEntryPoint",
        type: "address",
      },
    ],
    name: "updateEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "aggregator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingWalletFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawDepositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610fdd380380610fdd83398101604081905261002f9161007b565b600180546001600160a01b0319166001600160a01b03938416179055600080546001600160601b03169055166080526100b5565b6001600160a01b038116811461007857600080fd5b50565b6000806040838503121561008e57600080fd5b825161009981610063565b60208401519092506100aa81610063565b809150509250929050565b608051610eff6100de60003960008181610161015281816101bc01526108b90152610eff6000f3fe6080604052600436106100e15760003560e01c806380c5c7d01161007f578063affed0e011610059578063affed0e014610285578063b0d691fe146102b2578063c399ec88146102dd578063d0cb75fa146102f257600080fd5b806380c5c7d0146102085780638da5cb5b14610228578063a9059cbb1461026557600080fd5b8063245a7bfc116100bb578063245a7bfc1461014f5780633ad59dbc146101ad5780634a58db19146101e05780634d44560d146101e857600080fd5b80630565bb67146100ed5780630825d1fc1461010f5780631b71bb6e1461012f57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610b57565b610312565b005b34801561011b57600080fd5b5061010d61012a366004610be0565b610361565b34801561013b57600080fd5b5061010d61014a366004610c47565b61039c565b34801561015b57600080fd5b506101837f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101b957600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610183565b61010d6103b0565b3480156101f457600080fd5b5061010d610203366004610c6b565b61043b565b34801561021457600080fd5b5061010d610223366004610b57565b6104ea565b34801561023457600080fd5b50600054610183906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561027157600080fd5b5061010d610280366004610c6b565b6104f2565b34801561029157600080fd5b506000546bffffffffffffffffffffffff165b6040519081526020016101a4565b3480156102be57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff16610183565b3480156102e957600080fd5b506102a4610542565b3480156102fe57600080fd5b5061010d61030d366004610ce3565b6105f8565b61031a61071c565b61035b848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b992505050565b50505050565b610369610836565b6103748484846108b7565b6103816040850185610d4f565b9050600003610393576103938461096c565b61035b81610a34565b6103a4610a9f565b6103ad81610aa7565b50565b60006103d160015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163460405160006040518083038185875af1925050503d8060008114610428576040519150601f19603f3d011682016040523d82523d6000602084013e61042d565b606091505b50509050806103ad57600080fd5b61044361071c565b60015473ffffffffffffffffffffffffffffffffffffffff166040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b1580156104ce57600080fd5b505af11580156104e2573d6000803e3d6000fd5b505050505050565b61031a610836565b6104fa61071c565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f1935050505015801561053d573d6000803e3d6000fd5b505050565b600061056360015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f39190610db4565b905090565b61060061071c565b82811461066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e677468730000000000000000000000000060448201526064015b60405180910390fd5b60005b838110156107155761070385858381811061068e5761068e610dcd565b90506020020160208101906106a39190610c47565b60008585858181106106b7576106b7610dcd565b90506020028101906106c99190610d4f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107b992505050565b8061070d81610e2b565b915050610671565b5050505050565b6000546c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1633148061075157503330145b6107b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610665565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516107e29190610e63565b60006040518083038185875af1925050503d806000811461081f576040519150601f19603f3d011682016040523d82523d6000602084013e610824565b606091505b50915091508161071557805160208201fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146107b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f77616c6c65743a206e6f742066726f6d20456e747279506f696e7400000000006044820152606401610665565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672061676772656761746f72000000000000000000000000000000006044820152606401610665565b600080546020830135916bffffffffffffffffffffffff909116908061099183610e9e565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff16146103ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77616c6c65743a20696e76616c6964206e6f6e636500000000000000000000006044820152606401610665565b80156103ad5760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610715576040519150601f19603f3d011682016040523d82523d6000602084013e610715565b6107b761071c565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff811681146103ad57600080fd5b60008060008060608587031215610b6d57600080fd5b8435610b7881610b35565b935060208501359250604085013567ffffffffffffffff80821115610b9c57600080fd5b818701915087601f830112610bb057600080fd5b813581811115610bbf57600080fd5b886020828501011115610bd157600080fd5b95989497505060200194505050565b60008060008060808587031215610bf657600080fd5b843567ffffffffffffffff811115610c0d57600080fd5b85016101608188031215610c2057600080fd5b9350602085013592506040850135610c3781610b35565b9396929550929360600135925050565b600060208284031215610c5957600080fd5b8135610c6481610b35565b9392505050565b60008060408385031215610c7e57600080fd5b8235610c8981610b35565b946020939093013593505050565b60008083601f840112610ca957600080fd5b50813567ffffffffffffffff811115610cc157600080fd5b6020830191508360208260051b8501011115610cdc57600080fd5b9250929050565b60008060008060408587031215610cf957600080fd5b843567ffffffffffffffff80821115610d1157600080fd5b610d1d88838901610c97565b90965094506020870135915080821115610d3657600080fd5b50610d4387828801610c97565b95989497509550505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d8457600080fd5b83018035915067ffffffffffffffff821115610d9f57600080fd5b602001915036819003821315610cdc57600080fd5b600060208284031215610dc657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e5c57610e5c610dfc565b5060010190565b6000825160005b81811015610e845760208186018101518583015201610e6a565b81811115610e93576000828501525b509190910192915050565b60006bffffffffffffffffffffffff808316818103610ebf57610ebf610dfc565b600101939250505056fea264697066735822122031ad8a1a9e0e4b0306b399bf2081b12265ecd71980ca924e0a73d63825ff55d764736f6c634300080f0033";

type TestAggregatedWalletConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAggregatedWalletConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAggregatedWallet__factory extends ContractFactory {
  constructor(...args: TestAggregatedWalletConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    anEntryPoint: PromiseOrValue<string>,
    anAggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestAggregatedWallet> {
    return super.deploy(
      anEntryPoint,
      anAggregator,
      overrides || {}
    ) as Promise<TestAggregatedWallet>;
  }
  override getDeployTransaction(
    anEntryPoint: PromiseOrValue<string>,
    anAggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      anEntryPoint,
      anAggregator,
      overrides || {}
    );
  }
  override attach(address: string): TestAggregatedWallet {
    return super.attach(address) as TestAggregatedWallet;
  }
  override connect(signer: Signer): TestAggregatedWallet__factory {
    return super.connect(signer) as TestAggregatedWallet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatedWalletInterface {
    return new utils.Interface(_abi) as TestAggregatedWalletInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregatedWallet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestAggregatedWallet;
  }
}
