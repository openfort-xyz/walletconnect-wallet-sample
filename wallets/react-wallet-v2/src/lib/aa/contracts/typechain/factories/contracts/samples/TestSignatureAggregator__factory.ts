/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestSignatureAggregator,
  TestSignatureAggregatorInterface,
} from "../../../contracts/samples/TestSignatureAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "sigsForAggregation",
        type: "bytes[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatesSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "sigForUserOp",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sigForAggregation",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "offChainSigInfo",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061076c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636076d43a14610046578063a8309b9e14610071578063e3563a4f14610091575b600080fd5b610059610054366004610382565b6100a6565b6040516100689392919061044a565b60405180910390f35b61008461007f3660046104d9565b61013f565b604051610068919061051b565b6100a461009f366004610535565b6101c7565b005b606080606084602001356040516020016100c291815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252602088810135908401529101604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815260208301909152600082529097919650945092505050565b60606000805b838110156101a2576000858583818110610161576101616105cc565b905060200281019061017391906105fb565b8101906101809190610660565b905061018c81846106a8565b925050808061019a906106c0565b915050610145565b5060408051602081018390520160405160208183030381529060405291505092915050565b6000805b8481101561021f5760008686838181106101e7576101e76105cc565b90506020028101906101f991906106f8565b60200135905061020981846106a8565b9250508080610217906106c0565b9150506101cb565b50602082146102b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f546573745369676e617475726556616c696461746f723a20736967206d75737460448201527f2062652075696e7400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60006102c383850185610660565b905081811461037a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f546573745369676e617475726556616c696461746f723a20616767726567617460448201527f6564207369676e6174757265206d69736d6174636820286e6f6e63652073756d60648201527f2900000000000000000000000000000000000000000000000000000000000000608482015260a4016102ac565b505050505050565b6000806040838503121561039557600080fd5b823567ffffffffffffffff8111156103ac57600080fd5b830161016081860312156103bf57600080fd5b9150602083013580151581146103d457600080fd5b809150509250929050565b6000815180845260005b81811015610405576020818501810151868301820152016103e9565b81811115610417576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600061045d60608301866103df565b828103602084015261046f81866103df565b9050828103604084015261048381856103df565b9695505050505050565b60008083601f84011261049f57600080fd5b50813567ffffffffffffffff8111156104b757600080fd5b6020830191508360208260051b85010111156104d257600080fd5b9250929050565b600080602083850312156104ec57600080fd5b823567ffffffffffffffff81111561050357600080fd5b61050f8582860161048d565b90969095509350505050565b60208152600061052e60208301846103df565b9392505050565b6000806000806040858703121561054b57600080fd5b843567ffffffffffffffff8082111561056357600080fd5b61056f8883890161048d565b9096509450602087013591508082111561058857600080fd5b818701915087601f83011261059c57600080fd5b8135818111156105ab57600080fd5b8860208285010111156105bd57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261063057600080fd5b83018035915067ffffffffffffffff82111561064b57600080fd5b6020019150368190038213156104d257600080fd5b60006020828403121561067257600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156106bb576106bb610679565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106f1576106f1610679565b5060010190565b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea183360301811261072c57600080fd5b919091019291505056fea264697066735822122058e87e8f8a704fcccbfb79d0f3042c1abc5396a25aa96741d991733d24f6703364736f6c634300080f0033";

type TestSignatureAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSignatureAggregator__factory extends ContractFactory {
  constructor(...args: TestSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<TestSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSignatureAggregator {
    return super.attach(address) as TestSignatureAggregator;
  }
  override connect(signer: Signer): TestSignatureAggregator__factory {
    return super.connect(signer) as TestSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSignatureAggregatorInterface {
    return new utils.Interface(_abi) as TestSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestSignatureAggregator;
  }
}
